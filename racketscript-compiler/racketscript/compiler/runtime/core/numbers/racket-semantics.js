var t={d:(n,e)=>{for(var i in e)t.o(e,i)&&!t.o(n,i)&&Object.defineProperty(n,i,{enumerable:!0,get:e[i]})},o:(t,n)=>Object.prototype.hasOwnProperty.call(t,n)},n={};function e(t){return t instanceof f||t instanceof m||t instanceof g||t instanceof d}function i(t){return"number"==typeof t||"bigint"==typeof t}function r(t){return Number.isInteger(t)||"bigint"==typeof t}function s(t){const n=Number.MAX_SAFE_INTEGER,e=Number.MIN_SAFE_INTEGER;return"number"==typeof t?Number.isFinite(t)&&t>=e&&t<=n:t>=BigInt(e)&&t<=BigInt(n)}function a(t){return Number.isFinite(t)&&!s(t)}function u(t,n){let e=1n;for(;0n!==n;)n%2n===0n?(t*=t,n/=2n):(e*=t,n-=1n);return e}function o(t){return r(t)&&("bigint"==typeof t?1n===t:1===t)}function h(t){const n="bigint"==typeof t,e=Number.isFinite(t)&&!Number.isNaN(t);return n||e}function c(t,n){return t=n.isExact()?t:t.toInexact(),n=t.isExact()?n:n.toInexact(),[t,n]}function l(t){return t instanceof m||t instanceof g}t.d(n,{h1:()=>g,sc:()=>d,TQ:()=>w,$6:()=>_,IG:()=>$,qL:()=>E,WV:()=>x,Dr:()=>b,V3:()=>p,uB:()=>I,I:()=>G,Wc:()=>R,bw:()=>A,qV:()=>j,h9:()=>F,ZQ:()=>P,gE:()=>M,jy:()=>S,P:()=>T,D:()=>O,ZK:()=>f,i1:()=>Z,$D:()=>X,K_:()=>B,k8:()=>q,ry:()=>N,PI:()=>C,Mr:()=>m,pT:()=>v,xE:()=>y,Wn:()=>en,Kh:()=>bn,IH:()=>jt,EU:()=>ln,J4:()=>Rt,r3:()=>kn,ZR:()=>xn,z4:()=>yn,fv:()=>En,C:()=>u,yc:()=>Wn,Zy:()=>Yn,SD:()=>Dn,YF:()=>Ln,am:()=>Rn,eY:()=>sn,Kx:()=>gn,mC:()=>pn,f9:()=>vn,gQ:()=>Ut,cs:()=>Dt,e:()=>z,fS:()=>Tt,RN:()=>Pt,Wj:()=>Zt,Qq:()=>Qt,bR:()=>Vt,GW:()=>rn,z7:()=>Pn,mL:()=>Bn,th:()=>tn,tS:()=>Mt,Vl:()=>St,i:()=>H,wp:()=>mn,c2:()=>Ot,gY:()=>Q,qt:()=>o,vx:()=>Kt,EY:()=>e,Mc:()=>it,Gf:()=>pt,D3:()=>xt,Cl:()=>ut,NR:()=>ot,iR:()=>ht,YK:()=>l,xV:()=>Nt,N4:()=>lt,Mo:()=>ft,Dp:()=>bt,yF:()=>ct,U:()=>at,MM:()=>r,ZI:()=>i,i2:()=>It,nM:()=>dt,GR:()=>vt,hj:()=>et,rA:()=>wt,xP:()=>gt,Ks:()=>Et,DL:()=>st,FO:()=>rt,Bq:()=>s,eq:()=>yt,Fr:()=>mt,uq:()=>nn,Qj:()=>Ft,$2:()=>Ct,cM:()=>Jt,VE:()=>hn,Tg:()=>Xn,IL:()=>An,ep:()=>jn,L5:()=>$n,Wi:()=>on,gP:()=>Gn,Yp:()=>un,Ts:()=>c,$W:()=>Yt,Jp:()=>Xt,qn:()=>K,bq:()=>U,ML:()=>V,nZ:()=>Y,$Y:()=>J,fI:()=>h,D$:()=>$t,XA:()=>Ht,J_:()=>L,pi:()=>k,wc:()=>Lt,$c:()=>fn,sp:()=>Wt,NM:()=>an,H0:()=>a,O$:()=>dn,R_:()=>In,GC:()=>kt,_b:()=>zt,$X:()=>Gt,OR:()=>wn,AE:()=>qn,Pq:()=>Bt,MB:()=>Tn,rP:()=>_t,ak:()=>W,bM:()=>D});class f{constructor(t){this.num=t,Object.freeze(this)}isInexact(){return!0}isExact(){return!1}toInexact(){return this}toExact(){if(!this.isFinite())throw new Error(`There is no exact representation of ${this}`);const t=this.num.toString().match(/^(.*)\.(.*)$/);if(t){const n=Math.pow(10,t[2].length);return new m(Math.round(this.num*n),n)}return new m(this.num,1)}toComplex(){return new d(this,p)}toFixnum(){return Math.floor(this.num)}isInteger(){return Number.isInteger(this.num)}isRational(){return this.isFinite()}isReal(){return!0}isComplex(){return!0}isZero(){return 0===this.num}isNegativeZero(){return Object.is(this.num,-0)}isPositive(){return this.num>0}isNegative(){return this.num<0}isEven(){return this.num%2==0}isFinite(){return Number.isFinite(this.num)}isNaN(){return Number.isNaN(this.num)}toString(){return Number.isNaN(this.num)?"+nan.0":this.num===1/0?"+inf.0":this.num===-1/0?"-inf.0":Number.isInteger(this.num)?this.num.toString()+".0":this.num.toString()}toSignedString(){return Number.isFinite(this.num)&&this.num>=0?"+"+this.toString():this.toString()}[Symbol.toPrimitive](t){return"string"===t?this.toString():this.num}greaterThan(t){if(t instanceof d)throw new TypeError("Not defined for complex numbers");return t.isExact()?!this.isNaN()&&(this.isFinite()?this.toExact().greaterThan(t):this.isPositive()):this.num>t.num}greaterThanOrEqual(t){if(t instanceof d)throw new TypeError("Not defined for complex numbers");return t.isExact()?!this.isNaN()&&(this.isFinite()?this.toExact().greaterThanOrEqual(t):this.isPositive()):this.num>=t.num}lessThan(t){if(t instanceof d)throw new TypeError("Not defined for complex numbers");return t.isExact()?!this.isNaN()&&(this.isFinite()?this.toExact().lessThan(t):!this.isPositive()):this.num<t.num}lessThanOrEqual(t){if(t instanceof d)throw new TypeError("Not defined for complex numbers");return t.isExact()?!this.isNaN()&&(this.isFinite()?this.toExact().lessThanOrEqual(t):!this.isPositive()):this.num<=t.num}equals(t){return!this.isNaN()&&(t instanceof d?this.toComplex().equals(t):this.isFinite()?t.isExact()?this.toExact().equals(t):this.num===t.num:!t.isExact()&&this.num===t.num)}add(t){return t instanceof d?this.toComplex().add(t):l(t)?this.add(t.toInexact()):new f(this.num+t.num)}subtract(t){return t instanceof d?this.toComplex().subtract(t):l(t)?this.subtract(t.toInexact()):new f(this.num-t.num)}multiply(t){return t instanceof d?this.toComplex().multiply(t):l(t)?t.isZero()?p:this.multiply(t.toInexact()):new f(this.num*t.num)}divide(t){return t instanceof d?this.toComplex().divide(t):this.isZero()?this:l(t)?this.divide(t.toInexact()):new f(this.num/t.num)}numerator(){return this.toExact().numerator().toInexact()}denominator(){return this.toExact().denominator().toInexact()}integerSqrt(){return new f(Math.floor(Math.sqrt(this.num)))}sqrt(){if(this.isNegative()){const t=this.multiply(F).sqrt();return new d(T,t)}return new f(Math.sqrt(this.num))}abs(){return new f(Math.abs(this.num))}floor(){return new f(Math.floor(this.num))}ceiling(){return new f(Math.ceil(this.num))}round(){return new f(Math.round(this.num))}conjugate(){return this}magnitude(){return this}realPart(){return this}imaginaryPart(){return p}angle(){return 0===this.num||this.num>0?p:new f(Math.PI)}log(){return this.isNegative()?this.toComplex().log():new f(Math.log(this.num))}expt(t){return t instanceof d?this.toComplex().expt(t):l(t)?this.expt(t.toInexact()):new f(Math.pow(this.num,t.num))}exp(){return new f(Math.exp(this.num))}tan(){return new f(Math.tan(this.num))}cos(){return new f(Math.cos(this.num))}sin(){return new f(Math.sin(this.num))}atan(){return new f(Math.atan(this.num))}acos(){return-1<=this.num&&this.num<=1?new f(Math.acos(this.num)):this.toComplex().acos()}asin(){return-1<=this.num&&this.num<=1?new f(Math.asin(this.num)):this.toComplex().asin()}}class m{constructor(t,n=1){if(!Number.isInteger(t)&&!Number.isInteger(n))throw new TypeError("Exact number can only be constructed from integers.");if("number"!=typeof t||"number"!=typeof n)throw new TypeError("Exact value numerator and denominator types must match");{n<0&&(t*=-1,n*=-1),Object.is(t,-0)&&(t=0);const e=this.gcd(t,n);this.num=t/e,this.den=n/e}Object.freeze(this)}gcd(t,n){let e;for(;0!==n;)e=t,t=n,n=e%n;return Math.abs(t)}isExact(){return!0}isInexact(){return!1}toInexact(){const t=this.num/this.den;return new f(t)}toExact(){return this}toBigExact(){return new g(BigInt(this.num),BigInt(this.den))}toComplex(){return new d(this,p)}toFixnum(){return Math.floor(this.num/this.den)}isInteger(){return 1===this.den}isRational(){return!0}isReal(){return!0}isComplex(){return!0}isZero(){return 0===this.num}isNegativeZero(){return!1}isPositive(){return this.num>0}isNegative(){return this.num<0}isEven(){return 1===this.den&&this.num%2==0}isFinite(){return!0}isNaN(){return!1}toString(){return 1===this.den?this.num.toString():`${this.num}/${this.den}`}toSignedString(){return this.isPositive()||this.isZero()?"+"+this.toString():this.toString()}[Symbol.toPrimitive](t){return"string"===t?this.toString():this.num/this.den}greaterThan(t){if(t instanceof f)return!t.isNaN()&&(t.isFinite()?this.greaterThan(t.toExact()):!t.isPositive());if(t instanceof g)return this.toBigExact().greaterThan(t);if(t instanceof d)throw new TypeError("Not defined for complex numbers.");return this.num*t.den>t.num*this.den}greaterThanOrEqual(t){if(t instanceof f)return!t.isNaN()&&(t.isFinite()?this.greaterThanOrEqual(t.toExact()):!t.isPositive());if(t instanceof g)return this.toBigExact().greaterThanOrEqual(t);if(t instanceof d)throw new TypeError("Not defined for complex numbers.");return this.num*t.den>=t.num*this.den}lessThan(t){if(t instanceof f)return!t.isNaN()&&(t.isFinite()?this.lessThan(t.toExact()):t.isPositive());if(t instanceof g)return this.toBigExact().lessThan(t);if(t instanceof d)throw new TypeError("Not defined for complex numbers.");return this.num*t.den<t.num*this.den}lessThanOrEqual(t){if(t instanceof f)return!t.isNaN()&&(t.isFinite()?this.lessThanOrEqual(t.toExact()):t.isPositive());if(t instanceof g)return this.toBigExact().lessThanOrEqual(t);if(t instanceof d)throw new TypeError("Not defined for complex numbers.");return this.num*t.den<=t.num*this.den}equals(t){return t instanceof f?!!t.isFinite()&&this.equals(t.toExact()):t instanceof g?this.toBigExact().equals(t):t instanceof d?this.toComplex().equals(t):this.num*t.den==t.num*this.den}add(t){if(t instanceof f)return this.toInexact().add(t);if(t instanceof g)return this.toBigExact().add(t);if(t instanceof d)return this.toComplex().add(t);{const n=this.num*t.den+t.num*this.den,e=this.den*t.den;return s(n)&&s(e)?new m(n,e):this.toBigExact().add(t.toBigExact())}}subtract(t){if(t instanceof f)return this.toInexact().subtract(t);if(t instanceof g)return this.toBigExact().subtract(t);if(t instanceof d)return this.toComplex().subtract(t);{const n=this.num*t.den-t.num*this.den,e=this.den*t.den;return s(n)&&s(e)?new m(n,e):this.toBigExact().subtract(t.toBigExact())}}multiply(t){if(this.isZero()||t.isExact()&&t.isZero())return p;if(t instanceof f)return this.toInexact().multiply(t);if(t instanceof g)return this.toBigExact().multiply(t);if(t instanceof d)return this.toComplex().multiply(t);{const n=this.num*t.num,e=this.den*t.den;return s(n)&&s(e)?new m(n,e):this.toBigExact().multiply(t.toBigExact())}}divide(t){if(this.isZero())return this;if(t instanceof f)return this.toInexact().divide(t);if(t instanceof g)return this.toBigExact().divide(t);if(t instanceof d)return this.toComplex().divide(t);if(t.isZero())throw new Error("/: division by zero"+this+t);{const n=this.num*t.den,e=this.den*t.num;return s(n)&&s(e)?new m(n,e):this.toBigExact().divide(t.toBigExact())}}numerator(){return new m(this.num)}denominator(){return new m(this.den)}integerSqrt(){if(this.isNegative()){const t=this.multiply(E).sqrt().realPart().floor(),n=t.isExact()?p:T;return new d(n,t)}return this.sqrt().realPart().floor()}sqrt(){if(this.isNegative()){const t=this.multiply(E).sqrt().realPart();return t.isExact()?new d(p,t):new d(T,t)}const t=Math.sqrt(this.num),n=Math.sqrt(this.den);return t===Math.floor(t)&&n===Math.floor(n)?new m(t,n):new f(t/n)}abs(){return this.isNegative()?new m(-1*this.num,this.den):this}floor(){return 1===this.den?this:new m(Math.floor(this.num/this.den))}ceiling(){return 1===this.den?this:new m(Math.ceil(this.num/this.den))}round(){return 1===this.den?this:new m(Math.round(this.num/this.den))}conjugate(){return this}magnitude(){return this}realPart(){return this}imaginaryPart(){return p}angle(){return this.isNegative()?new f(Math.PI):new m(0)}log(){return this.isNegative()?this.toComplex().log():new f(Math.log(this.num/this.den))}expt(t){if(t instanceof d)return this.toComplex().expt(t);if(t.isExact()&&t.isInteger()&&!t.isNegative()){const n=t.toFixnum();if("bigint"==typeof n)return this.toBigExact().expt(t);const e=Math.pow(this.num,n),i=Math.pow(this.den,n);return s(e)&&s(i)?new m(e,i):this.toBigExact().expt(t)}return this.toInexact().expt(t)}exp(){return new f(Math.exp(this.num/this.den))}tan(){return new f(Math.tan(this.num/this.den))}cos(){return new f(Math.cos(this.num/this.den))}sin(){return new f(Math.sin(this.num/this.den))}atan(){return new f(Math.atan(this.num/this.den))}acos(){return new f(Math.acos(this.num/this.den))}asin(){return new f(Math.asin(this.num/this.den))}}class g{constructor(t,n=1n){if("bigint"!=typeof t||"bigint"!=typeof n)throw new TypeError("Exact value numerator and denominator types must match");{n<0&&(t*=-1n,n*=-1n);const e=this.gcd(t,n);this.num=t/e,this.den=n/e}Object.freeze(this)}gcd(t,n){let e;for(;0n!==n;)e=t,t=n,n=e%n;return t<0n?-1n*t:t}isInexact(){return!1}isExact(){return!0}toInexact(){const t=Number(this.num)/Number(this.den);return new f(t)}toExact(){return this}toSmallExact(){return new m(Number(this.num),Number(this.den))}toComplex(){return new d(this,p)}toFixnum(){return this.num/this.den}isInteger(){return 1n===this.den}isRational(){return!0}isReal(){return!0}isComplex(){return!0}isZero(){return 0n===this.num}isNegativeZero(){return!1}isPositive(){return this.num>0n}isNegative(){return this.num<0n}isEven(){return 1n===this.den&&this.num%2n===0n}isFinite(){return!0}isNaN(){return!1}toString(){const t=this.num.toString().slice(0,-1),n=this.den.toString().slice(0,-1);return 1n===this.den?t:`${t}/${n}`}toSignedString(){return this.isNegative()?this.toString():"+"+this.toString()}[Symbol.toPrimitive](t){return"string"===t?this.toString():1n===this.den?this.num:Number(this.num)/Number(this.den)}greaterThan(t){return t instanceof f?!t.isNaN()&&(t.isFinite()?this.greaterThan(t.toExact()):!t.isPositive()):t instanceof m?this.greaterThan(t.toBigExact()):t instanceof d?this.toComplex().greaterThan(t):this.num*t.den>t.num*this.den}greaterThanOrEqual(t){return t instanceof f?!t.isNaN()&&(t.isFinite()?this.greaterThanOrEqual(t.toExact()):!t.isPositive()):t instanceof m?this.greaterThanOrEqual(t.toBigExact()):t instanceof d?this.toComplex().greaterThanOrEqual(t):this.num*t.den>=t.num*this.den}lessThan(t){return t instanceof f?!t.isNaN()&&(t.isFinite()?this.lessThan(t.toExact()):t.isPositive()):t instanceof m?this.lessThan(t.toBigExact()):t instanceof d?this.toComplex().lessThan(t):this.num*t.den<t.num*this.den}lessThanOrEqual(t){return t instanceof f?!t.isNaN()&&(t.isFinite()?this.lessThanOrEqual(t.toExact()):t.isPositive()):t instanceof m?this.lessThanOrEqual(t.toBigExact()):t instanceof d?this.toComplex().lessThanOrEqual(t):this.num*t.den<=t.num*this.den}equals(t){return t instanceof f?!!t.isFinite()&&this.equals(t.toExact()):t instanceof m?this.equals(t.toBigExact()):t instanceof d?this.toComplex().equals(t):this.num*t.den==t.num*this.den}add(t){if(t instanceof f)return this.toInexact().add(t);if(t instanceof m)return this.add(t.toBigExact());if(t instanceof d)return this.toComplex().add(t);{const n=this.num*t.den+t.num*this.den,e=this.den*t.den;return s(n)&&s(e)?new m(Number(n),Number(e)):new g(n,e)}}subtract(t){if(t instanceof f)return this.toInexact().subtract(t);if(t instanceof m)return this.subtract(t.toBigExact());if(t instanceof d)return this.toComplex().subtract(t);{const n=this.num*t.den-t.num*this.den,e=this.den*t.den;return s(n)&&s(e)?new m(Number(n),Number(e)):new g(n,e)}}multiply(t){if(t.isExact()&&t.isZero()||this.isZero())return p;if(t instanceof f)return this.toInexact().multiply(t);if(t instanceof m)return this.multiply(t.toBigExact());if(t instanceof d)return this.toComplex().multiply(t);{const n=this.num*t.num,e=this.den*t.den;return s(n)&&s(e)?new m(Number(n),Number(e)):new g(n,e)}}divide(t){if(this.isZero())return p;if(t instanceof f)return this.toInexact().divide(t);if(t instanceof m)return this.divide(t.toBigExact());if(t instanceof d)return this.toComplex().divide(t);{const n=this.num*t.den,e=this.den*t.num;return s(n)&&s(e)?new m(Number(n),Number(e)):new g(n,e)}}numerator(){return new g(this.num)}denominator(){return new g(this.den)}integerSqrt(){return this.sqrt().floor()}sqrt(){return this.toSmallExact().sqrt()}abs(){return this.isNegative()?new g(-1n*this.num,this.den):this}floor(){return 1n===this.den?this:new g(this.num/this.den)}ceiling(){return 1n===this.den?this:new g(this.num/this.den+1n)}round(){if(1n===this.den)return this;{const t=this.floor(),n=this.subtract(t).abs(),e=this.ceiling();return e.subtract(this).abs().greaterThanOrEqual(n)?e:t}}conjugate(){return this}magnitude(){return this}realPart(){return this}imaginaryPart(){return p}angle(){return new g(0n)}log(){return this.isNegative()?this.toComplex().log():this.toInexact().log()}expt(t){if(t instanceof d)return this.toComplex().expt(t);if(t.isExact()&&t.isInteger()&&!t.isNegative()){const n=BigInt(t.toFixnum()),e=u(this.num,n),i=u(this.den,n);return s(e)&&s(i)?new m(Number(e),Number(i)):new g(e,i)}return this.toInexact().expt(t)}exp(){return this.toSmallExact().exp()}tan(){return this.toSmallExact().tan()}cos(){return this.toSmallExact().cos()}sin(){return this.toSmallExact().sin()}atan(){return this.toSmallExact().atan()}acos(){return this.toSmallExact().acos()}asin(){return this.toSmallExact().asin()}}class d{constructor(t,n){this.real=t,this.imag=void 0===n?y:n,Object.freeze(this)}isExact(){return this.real.isExact()&&this.imag.isExact()}isInexact(){return!this.isExact()}toInexact(){return this.isInexact()?this:this.isReal()?this.real.toInexact():new d(this.real.toInexact(),this.imag.toInexact())}toExact(){return this.isExact()?this:this.isReal()?this.real.toExact():new d(this.real.toExact(),this.imag.toExact())}toReal(){if(!this.isReal())throw new TypeError("Complex number cannot be made real.");return this.real}toComplex(){return this}toFixnum(){if(!this.isReal())throw new TypeError("Not defined for complex numbers.");return this.real.toFixnum()}isInteger(){return this.isRational()&&this.real.isInteger()}isRational(){return this.isReal()&&this.isFinite()}isReal(){return this.imag.isZero()&&this.imag.isExact()}isComplex(){return!0}isZero(){return this.real.isZero()&&this.imag.isZero()}isNegativeZero(){return this.isReal()&&this.real.isNegativeZero()}isPositive(){if(!this.isReal())throw new TypeError("Not defined for complex numbers.");return this.real.isPositive()}isNegative(){if(!this.isReal())throw new TypeError("Not defined for complex numbers.");return this.real.isNegative()}isEven(){if(!this.isInteger())throw new TypeError("Only defined for Integers.");return this.real.isEven()}isFinite(){return this.real.isFinite()&&this.imag.isFinite()}isNaN(){return this.real.isNaN()||this.imag.isNaN()}toString(){return this.isReal()?this.real.toString():this.real.toString()+this.imag.toSignedString()+"i"}toSignedString(){return this.real.toSignedString()+this.imag.toSignedString()+"i"}[Symbol.toPrimitive](t){if("string"===t)return this.toString();if(!this.isReal())return Number.NaN;const n=this.real[Symbol.toPrimitive](t);return"number"===t&&"bigint"==typeof n||"default"===t&&"bigint"==typeof n?Number(n):"bigint"===t&&"number"==typeof n?BigInt(n):n}greaterThan(t){if(!this.isReal()||!t.isReal())throw new Error("Greater than not defined for complex numbers.");return this.real.greaterThan(t)}greaterThanOrEqual(t){if(!this.isReal()||!t.isReal())throw new Error("Greater than or equal not defined for complex numbers.");return this.real.greaterThanOrEqual(t)}lessThan(t){if(!this.isReal()||!t.isReal())throw new Error("Less than not defined for complex numbers.");return this.real.lessThan(t)}lessThanOrEqual(t){if(!this.isReal()||!t.isReal())throw new Error("Less than or equal not defined for complex numbers.");return this.real.lessThanOrEqual(t)}equals(t){return t=t.toComplex(),this.real.equals(t.real)&&this.imag.equals(t.imag)}add(t){let n=this.realPart().add(t.realPart());if(this.isReal()&&t.isReal())return n;let e=this.imaginaryPart().add(t.imaginaryPart());return[n,e]=c(n,e),new d(n,e)}subtract(t){let n=this.realPart().subtract(t.realPart());if(this.isReal()&&t.isReal())return n;let e=this.imaginaryPart().subtract(t.imaginaryPart());return[n,e]=c(n,e),new d(n,e)}multiply(t){const n=this.realPart(),e=this.imaginaryPart(),i=t.realPart(),r=t.imaginaryPart();let s=n.multiply(i).subtract(e.multiply(r));const a=n.multiply(r).add(e.multiply(i));return s=a.isExact()?s:s.toInexact(),new d(s,a)}divide(t){if(t.isReal()){const n=this.realPart().divide(t.realPart()),e=this.imaginaryPart().divide(t.realPart());return new d(n,e)}let n,e,i,r,s,a,u;if(this.isInexact()||t.isInexact())return n=this.realPart(),e=this.imaginaryPart(),i=t.realPart(),r=t.imaginaryPart(),r.abs().lessThanOrEqual(i.abs())?(s=r.divide(i),a=n.add(e.multiply(s)).divide(i.add(r.multiply(s))),u=e.subtract(n.multiply(s)).divide(i.add(r.multiply(s)))):(s=i.divide(r),a=n.multiply(s).add(e).divide(i.multiply(s).add(r)),u=e.multiply(s).subtract(n).divide(i.multiply(s).add(r))),new d(a,u);{const n=t.conjugate(),e=this.multiply(n),i=t.multiply(n).realPart(),r=e.realPart().divide(i).realPart(),s=e.imaginaryPart().divide(i).realPart();return new d(r,s)}}numerator(){if(!this.isReal())throw new Error("Numerator not defined for complex numbers.");return this.real.numerator()}denominator(){if(!this.isReal())throw new Error("Denominator not defined for complex numbers.");return this.real.denominator()}integerSqrt(){if(this.isInteger())return this.real.integerSqrt();throw new Error("IntegerSqrt only defined for integers.")}sqrt(){if(this.isReal()&&!this.isNegative())return this.real.sqrt();const t=this.magnitude().realPart().add(this.real),n=t.divide(v).sqrt().realPart(),e=this.imag.divide(t.multiply(v).sqrt()).realPart();return new d(n,e)}abs(){if(!this.isReal())throw new Error("abs is not defined for complex numbers.");return this.real.abs()}floor(){if(!this.isReal())throw new Error("floor is not defined for complex numbers.");return this.real.floor()}ceiling(){if(!this.isReal())throw new Error("ceiling is not defined for complex numbers.");return this.real.ceiling()}round(){if(!this.isReal())throw new Error("round is not defined for complex numbers.");return this.real.round()}conjugate(){return new d(this.real,y.subtract(this.imag))}magnitude(){const t=this.real.multiply(this.real),n=this.imag.multiply(this.imag);return t.add(n).sqrt()}realPart(){return this.real}imaginaryPart(){return this.imag}log(){if(this.isReal()&&this.isPositive())return this.real.log();const t=this.magnitude().realPart().log(),n=this.angle();return t.add(n.multiply(G))}expt(t){if(t.isExact()&&t.isInteger()&&t.greaterThanOrEqual(y)){let n=this,e=t.toFixnum();const i="number"==typeof e,r=i?0:0n,s=i?1:1n,a=i?2:2n;let u=N;for(;e!==r;)e%a===r?(n=n.multiply(n),e/=a):(u=u.multiply(n),e-=s);return u}return t.multiply(this.log()).exp()}exp(){if(this.isReal())return this.real.exp();const t=this.real.exp(),n=this.imag.cos(),e=this.imag.sin();return t.multiply(n.add(e.multiply(G)))}angle(){if(this.isReal())return this.real.angle();if(this.real.isZero()){const t=C.divide(v);return this.imag.isPositive()?t:t.multiply(q)}const t=this.imaginaryPart().abs().divide(this.realPart().abs()).atan();return this.real.isPositive()?this.imag.isPositive()?t:t.multiply(q):this.imag.isPositive()?C.subtract(t):t.subtract(C)}tan(){return this.isReal()?this.real.tan():this.sin().divide(this.cos())}cos(){if(this.isReal())return this.real.cos();const t=this.multiply(G),n=t.multiply(q);return t.exp().add(n.exp()).divide(v)}sin(){if(this.isReal())return this.real.sin();const t=this.multiply(G),n=t.multiply(q),e=new d(y,v);return t.exp().subtract(n.exp()).divide(e)}atan(){if(this.isZero())return y;if(this.isReal())return this.real.atan();if(this.equals(G)||this.equals(X))return B;let t;return t=y.subtract(this),t=G.add(t),t=G.add(this).divide(t),t=t.log(),t=I.multiply(t),t=G.multiply(t),t}acos(){if(this.isReal()&&this.greaterThanOrEqual(q)&&this.lessThanOrEqual(N))return this.real.acos();const t=C.divide(v),n=this.multiply(G),e=N.subtract(this.multiply(this)).sqrt(),i=n.add(e).log().multiply(G);return t.add(i)}asin(){if(this.isReal()&&this.greaterThanOrEqual(q)&&this.lessThanOrEqual(N))return this.real.asin();const t=N.subtract(this.multiply(this)).sqrt();return v.multiply(this.divide(N.add(t)).atan())}}const p=new m(0,1),w=new m(1,2),x=new m(1,1),b=new m(2,1),E=new m(-1,1),y=p,N=x,I=w,v=b,q=E,T=new f(0),P=new f(-0),R=new f(.5),M=new f(1),S=new f(2),F=new f(-1),C=new f(Math.PI),O=new f(1/0),B=new f(-1/0),Z=new f(NaN),_=new d(y,N),$=new d(y,q),A=new d(T,M),j=new d(T,F),G=_,X=$,D=p,L=x,W=b,Y=E,k=C,z=new f(Math.E),K=Z,V=B,Q=O,J=P,H=_,U=$;function tt(t){return e(t)&&t.isReal()&&t.isInteger()&&t.isExact()&&(t=t.toFixnum()),"bigint"==typeof t&&s(t)&&(t=Number(t)),t}function nt(t,n){if(typeof t==typeof n)return[t,n];if(e(t))return"bigint"==typeof n?[t,new g(n)]:[t,new m(n)];if("bigint"==typeof t)return e(n)?[new g(t),n]:[t,BigInt(n)];if("number"==typeof t)return e(n)?[new m(t),n]:[BigInt(t),n];throw new TypeError(`Cannot match values ${t} ${n}`)}function et(t){const n="number"==typeof t&&Number.isInteger(t),i="bigint"==typeof t,r=e(t);return n||i||r}const it=et;function rt(t){const n="number"==typeof t&&Number.isInteger(t),i="bigint"==typeof t,r=e(t)&&t.isReal();return n||i||r}function st(t){const n="number"==typeof t&&Number.isInteger(t),i="bigint"==typeof t,r=e(t)&&t.isRational();return n||i||r}function at(t){const n="number"==typeof t&&Number.isInteger(t),i="bigint"==typeof t,r=e(t)&&t.isInteger();return n||i||r}function ut(t){const n="number"==typeof t&&Number.isInteger(t),i="bigint"==typeof t,r=e(t)&&t.isInteger()&&t.isExact();return n||i||r}function ot(t){const n="number"==typeof t&&Number.isInteger(t)&&t>=0,i="bigint"==typeof t&&t>=0n,r=e(t)&&t.isInteger()&&t.isExact()&&!t.isNegative();return n||i||r}function ht(t){const n="number"==typeof t&&Number.isInteger(t)&&t>0,i="bigint"==typeof t&&t>0n,r=e(t)&&t.isInteger()&&t.isExact()&&t.isPositive();return n||i||r}function ct(t){return e(t)&&t.isReal()&&t.isInexact()}function lt(t){return"number"==typeof t&&Number.isInteger(t)||"bigint"==typeof t}function ft(t){return e(t)&&t.isReal()&&t.isInexact()}function mt(t){const n="number"==typeof t&&0===t,i="bigint"==typeof t&&0n===t,r=e(t)&&t.isZero();return n||i||r}function gt(t){const n="number"==typeof t&&t>0,i="bigint"==typeof t&&t>0n,r=e(t)&&t.isPositive();return n||i||r}function dt(t){const n="number"==typeof t&&t<0,i="bigint"==typeof t&&t<0n,r=e(t)&&t.isNegative();return n||i||r}function pt(t){const n="number"==typeof t&&t%2==0,i="bigint"==typeof t&&t%2n===0n,r=e(t)&&t.isEven();return n||i||r}function wt(t){return!pt(t)}function xt(t){const n="number"==typeof t,i="bigint"==typeof t,r=e(t)&&t.isExact();return n||i||r}function bt(t){return e(t)&&t.isInexact()}function Et(t){return e(t)||r(t)}const yt=Et;function Nt(t){return e(t)?t.isFinite():"number"!=typeof t||Number.isFinite(t)}function It(t){return e(t)?t.isNaN():Number.isNaN(t)}function vt(t){return!!e(t)&&t.isNegativeZero()}const qt=function(t,n,i){return function(...r){if(r.length<2)throw new Error("Must be called with at least two arguments.");for(let s=0;s<r.length-1;s++){let a=r[s],u=r[s+1];if([a,u]=nt(a,u),"number"==typeof a&&!t(a,u))return!1;if("bigint"==typeof a&&!n(a,u))return!1;if(e(a)&&!i(a,u))return!1}return!0}};function Tt(...t){return 1===t.length||qt((function(t,n){return t===n}),(function(t,n){return t===n}),(function(t,n){return t.equals(n)}))(...t)}function Pt(t,n){return Tt(t,n)}function Rt(t,n,e){return Ct(en(Gt(t,n)),en(e))}function Mt(...t){return 1===t.length||qt((function(t,n){return t>n}),(function(t,n){return t>n}),(function(t,n){return t.greaterThan(n)}))(...t)}function St(...t){return 1===t.length||qt((function(t,n){return t>=n}),(function(t,n){return t>=n}),(function(t,n){return t.greaterThanOrEqual(n)}))(...t)}function Ft(...t){return 1===t.length||qt((function(t,n){return t<n}),(function(t,n){return t<n}),(function(t,n){return t.lessThan(n)}))(...t)}function Ct(...t){return 1===t.length||qt((function(t,n){return t<=n}),(function(t,n){return t<=n}),(function(t,n){return t.lessThanOrEqual(n)}))(...t)}function Ot(t){return e(t)?tt(t.toExact()):t}const Bt=Ot;function Zt(t){return e(t)?t.toInexact():new f(Number(t))}const _t=Zt;function $t(t){return t.toString()}function At(t,n,e){return function(...i){if(i.length<2)throw new Error("Must be called with at least two arguments.");let r,s,a=i[0];for(let u=1;u<i.length;u++)[r,s]=nt(a,i[u]),"number"==typeof r?(a=t(r,s),Number.isSafeInteger(a)||(a=n(BigInt(r),BigInt(s)))):a="bigint"==typeof r?n(r,s):e(r,s);return tt(a)}}function jt(...t){const n=At((function(t,n){return t+n}),(function(t,n){return t+n}),(function(t,n){return t.add(n)}));return 0===t.length?0:1===t.length?tt(t[0]):n(...t)}function Gt(...t){const n=At((function(t,n){return t-n}),(function(t,n){return t-n}),(function(t,n){return t.subtract(n)}));return 1===t.length?n(0,t[0]):n(...t)}function Xt(...t){const n=At((function(t,n){return t*n}),(function(t,n){return t*n}),(function(t,n){return t.multiply(n)}));return 0===t.length?1:1===t.length?tt(t[0]):n(...t)}function Dt(...t){const n=At((function(t,n){return t%n==0?t/n:new m(t).divide(new m(n))}),(function(t,n){return t%n===0n?t/n:new g(t).divide(new g(n))}),(function(t,n){return t.divide(n)}));return 1===t.length?n(1,t[0]):n(...t)}function Lt(t,n){let i;return[t,n]=nt(t,n),i=e(t)?t.divide(n).floor():"number"==typeof t?Math.floor(t/n):t/n,tt(i)}function Wt(t,n){let i;if([t,n]=nt(t,n),e(t)){const e=t.divide(n).floor();i=t.subtract(n.multiply(e))}else i=t%n;return tt(i)}function Yt(t,n){[t,n]=nt(t,n);let e=Wt(t,n);return dt(n)?gt(e)&&(e=jt(e,n)):dt(e)&&(e=jt(e,n)),tt(e)}function kt(t){return e(t)?tt(t.multiply(t)):tt(t*t)}function zt(t){if(e(t))return tt(t.sqrt());if("number"==typeof t){if(t<0){t=-t;const n=Math.sqrt(t);return Number.isInteger(n)?new d(p,new m(n)):new d(T,new f(n))}{const n=Math.sqrt(t);return Number.isInteger(n)?n:new f(n)}}return tt(new g(t).sqrt())}function Kt(t){if(dt(t)){const n=Kt(Xt(t,-1));return xt(n)?Xt(n,G):Xt(n,A)}const n=rn(zt(t));return xt(t)&&e(n)?n.toFixnum():n}function Vt(t,n){if(xt(n)&&Tt(n,0))return 1;if(bt(n)&&Tt(n,T))return M;if(xt(n)&&Tt(n,w))return zt(t);if(It(n))return rt(n)?Z:new d(Z,Z);if(vt(t)&&dt(n))return pt(n)?O:B;if(!Nt(t)&&!It(t)&&dt(t)&&at(n)&&dt(n))return pt(n)?T:P;if(!Nt(t)&&!It(t)&&gt(t)&&at(n)&&gt(n))return pt(n)?O:B;if(xt(t)&&mt(t)&&Tt(n,-1))throw new TypeError("not defined for 0 and -1");if([t,n]=nt(t,n),e(t))return tt(t.expt(n));if("number"==typeof t){const e=Math.pow(t,n);return a(e)||!Number.isFinite(e)?u(BigInt(t),BigInt(n)):e}return u(t,n)}function Qt(t){return 0===t||0n===t?1:e(t)?t.exp():"number"==typeof t?new f(Math.exp(t)):Qt(new g(t))}function Jt(t,n){let i;return e(t)?t.isExact()&&t.equals(N)?0:(i=t.log(),n&&(i=Dt(i,Jt(n))),i):"number"==typeof t?1===t?0:t<0?Jt(new m(t),n):(i=Math.log(t),n?Dt(i,Jt(n)):new f(i)):1n===t?0:Jt(new g(t),n)}function Ht(t){return e(t)?tt(t.numerator()):t}function Ut(t){return e(t)?tt(t.denominator()):1}function tn(...t){if(0===t.length)return 0;if(1===t.length)return t[0];const n=At((function(t,n){let e;for(;0!==n;)e=t,t=n,n=e%n;return t}),(function(t,n){let e;for(;0n!==n;)e=t,t=n,n=e%n;return t}),(function(t,n){const i=t.isExact()&&n.isExact();let r=Ht(t),s=Ut(t);e(r)&&(r=r.toFixnum()),e(s)&&(s=s.toFixnum());let a=Ht(n),u=Ut(n);e(a)&&(a=a.toFixnum()),e(u)&&(u=u.toFixnum());const o=Dt(tn(r,a),nn(s,u));return i?o:Zt(o)}));return n(...t)}function nn(...t){if(0===t.length)return 1;if(1===t.length)return en(t[0]);for(let n=0;n<t.length;n++)if(mt(t[n]))return xt(t[n])?p:T;return nn(en(Dt(Xt(n=t[0],e=t[1]),tn(n,e))),...t.slice(2));var n,e}function en(t){return e(t)?tt(t.abs()):"number"==typeof t?Math.abs(t):tt("bigint"==typeof t&&t>=0n?t:-1n*t)}function rn(t){return e(t)?tt(t.floor()):"bigint"==typeof t?tt(t):t}function sn(t){return e(t)?tt(t.ceiling()):"bigint"==typeof t?tt(t):t}function an(t){return e(t)?tt(t.round()):"bigint"==typeof t?tt(t):t}function un(t,n){return jt(t,Xt(n,_))}function on(t,n){return jt(Xt(t,pn(n)),Xt(t,dn(n),_))}function hn(t){return e(t)?cn(t)?O:tt(t.magnitude()):en(t)}function cn(t){const n=t.realPart(),e=t.imaginaryPart();return n.equals(O)||n.equals(B)||e.equals(O)||e.equals(B)}function ln(t){if(mt(t))throw new Error("Divide by zero");if(rt(t))return gt(t)?0:C;if(cn(t)){const n=t.realPart(),e=t.imaginaryPart();return n.equals(O)&&e.equals(O)?Dt(C,4):n.equals(O)&&e.equals(B)?Xt(-1,Dt(C,4)):n.equals(B)&&e.equals(B)?Xt(-3,Dt(C,4)):n.equals(B)&&e.equals(O)?Xt(3,Dt(C,4)):n.equals(O)?T.multiply(e):n.equals(B)?e.isPositive()?C:C.multiply(E):e.equals(O)?C.divide(b):C.divide(b).multiply(E)}return tt(t.angle())}function fn(t){return rt(t)?tt(t):tt(t.realPart())}function mn(t){return rt(t)?0:tt(t.imaginaryPart())}function gn(t){return rt(t)?tt(t):t.conjugate()}function dn(t){return xt(t)&&mt(t)?0:e(t)?t.sin():new f("number"==typeof t?Math.sin(t):Math.sin(Number(t)))}function pn(t){return xt(t)&&mt(t)?1:e(t)?t.cos():new f("number"==typeof t?Math.cos(t):Math.cos(Number(t)))}function wn(t){return xt(t)&&mt(t)?0:e(t)?t.tan():new f("number"==typeof t?Math.tan(t):Math.tan(Number(t)))}function xn(t){return xt(t)&&mt(t)?0:e(t)?t.asin():"number"==typeof t?-1<=t&&t<=1?new f(Math.asin(t)):new m(t,1).asin():-1n<=t&&t<=1n?new f(Math.asin(Number(t))):new g(t).asin()}function bn(t){return xt(t)&&function(t){return e(t)?t.equals(x):1===Number(t)}(t)?0:e(t)?t.acos():"number"==typeof t?-1<=t&&t<=1?new f(Math.acos(t)):new m(t).acos():-1n<=t&&t<=1n?new f(Math.acos(Number(t))):new g(t).acos()}const En=yn;function yn(t,n){if(void 0===n&&xt(t)&&mt(t))return 0;if(void 0===n)return Nn(t);const i=Dt(t,n);if(e(i)&&i.isNaN()){if(Tt(t,O)&&Tt(n,O))return Dt(C,4);if(Tt(t,O)&&Tt(n,B))return Xt(3,Dt(C,4));if(Tt(t,B)&&Tt(n,B))return Xt(-3,Dt(C,4));if(Tt(t,B)&&Tt(n,O))return Xt(-1,Dt(C,4))}if(gt(n))return Nn(i);if(dt(n)&&(gt(t)||mt(t)))return jt(Nn(i),C);if(dt(n)&&dt(t))return Gt(Nn(i),C);if(mt(n)&&gt(t))return Dt(C,2);if(mt(n)&&dt(t))return Gt(0,Dt(C,2));throw new Error("atan not defined for coordinates (0, 0)")}function Nn(t){return e(t)?t.atan():new f(t===1/0?1.5707963267948966:t===-1/0?-1.5707963267948966:"number"==typeof t?Math.atan(t):Math.atan(Number(t)))}function In(t){return Dt(Gt(Qt(t),Qt(Xt(t,-1))),2)}function vn(t){return mt(t)?M:Dt(jt(Qt(t),Qt(Xt(t,-1))),2)}function qn(t){return Dt(Gt(Qt(Xt(2,t)),1),jt(Qt(Xt(2,t)),1))}function Tn(t){return e(t)?t.toFixnum():t}function Pn(t){return"bigint"==typeof t||Number.isInteger(t)?t:new f(t)}function Rn(t){return"number"==typeof t?new m(t):new g(t)}const Mn=new RegExp("^([+-]?\\d+)/(\\d+)$"),Sn=new RegExp("^([+-]?[\\d\\w/\\.]*)([+-])([\\d\\w/\\.]*)i$"),Fn=new RegExp("^[+-]?\\d+$"),Cn=new RegExp("^([+-]?\\d*)\\.(\\d*)$"),On=new RegExp("^([+-]?\\d*\\.?\\d*)[Ee](\\+?\\d+)$");function Bn(t){if((t=t.toString()).match(Mn))return Zn(t);const n=t.match(Sn);if(n){const t=n[1]||"0",e=n[2]+(n[3]||"1");if(function(t){const n=null!==t[1].match(Fn)||null!==t[1].match(Mn),e=null!==t[3].match(Fn)||null!==t[3].match(Mn);return n&&e}(n))return un(Zn(t),Zn(e));const i=new f(Number(t)),r=new f(Number(e));return new d(i,r)}return"+nan.0"===t||"-nan.0"===t||"+nan.f"===t||"-nan.f"===t?Z:"+inf.0"===t||"+inf.f"===t?O:"-inf.0"===t||"-inf.f"===t?B:"-0.0"===t?P:t.match(Cn)||t.match(On)?new f(Number(t)):!!t.match(Fn)&&_n(t)}function Zn(t){if(t.match(Fn))return _n(t);const[n,e]=function(t){const n=t.match(Mn);if(n){let t=_n(n[1]),e=_n(n[2]);return typeof t!=typeof e&&(t=BigInt(t),e=BigInt(e)),[t,e]}throw new Error(`Fraction now found in ${t}`)}(t);return"number"==typeof n?new m(n,e):new g(n,e)}function _n(t){const n=Number(t);if(Number.isSafeInteger(n))return n;if(Number.isInteger(n))return BigInt(t);throw new Error(`${t} is not an integer`)}function $n(t,n){if(void 0===n||1===n||1n===n)return s(t)?Number(t):"bigint"==typeof t?t:"number"==typeof t&&Number.isInteger(t)?BigInt(t):new f(t);if(!r(t)||!r(n))throw new TypeError("Numerator and denominator must be integers");return 1===n||1n===n?t:typeof t!=typeof n?(t=BigInt(t),n=BigInt(n),new g(t,n)):"bigint"==typeof t?new g(t,n):new m(t,n)}function An({num:t,den:n,imagNum:e,imagDen:i}){const s=void 0===e;if(s&&void 0!==i)throw new Error("Must specify both a numerator and denominator.");if(!(s||void 0!==n&&void 0!==i||void 0===n&&void 0===i))throw new Error("Real and imaginary part must be the same exactness.");let a,u;if(a=s?void 0!==n&&r(t)&&r(n):void 0!==n&&r(t)&&r(n)&&null!=i&&r(e)&&r(i),!a&&"bigint"==typeof t)throw new TypeError("bigints can only be used with exact numbers");if(u=s&&a?typeof t==typeof n:!(!s||a)||(!s&&a?typeof t==typeof e&&typeof n==typeof i&&typeof t==typeof n:typeof t==typeof e),!u)throw new TypeError("All makeInstance arguments must be the same type.");const o="bigint"==typeof t;let h,c;if(s&&a&&o)h=new g(t,n),c=p;else if(s&&a&&!o)h=new m(t,n),c=p;else if(s&&!a)h=new f(t),c=p;else if(!s&&a&&o)h=new g(t,n),c=new g(e,i);else if(s||!a||o){if(s||a||o)throw new Error("Error creating Number");h=new f(t),c=new f(e)}else h=new m(t,n),c=new m(e,i);return new d(h,c)}function jn(t){return new f(t)}function Gn(t,n){return $n(t,n)}function Xn(t,n){return un(t,n)}function Dn(...t){t=t.map(tt);for(const n of t)if(!r(n))throw new TypeError("bitwise operators only defined for integers.");const n=t.reduce(((t,n)=>t||"bigint"==typeof n),!1);return n&&(t=t.map((t=>BigInt(t)))),tt(t.reduce(((t,n)=>t|n),n?0n:0))}function Ln(...t){t=t.map(tt);for(const n of t)if(!r(n))throw new TypeError("bitwise operators only defined for integers.");const n=t.reduce(((t,n)=>t||"bigint"==typeof n),!1);return n&&(t=t.map((t=>BigInt(t)))),tt(t.reduce(((t,n)=>t^n),n?0n:0))}function Wn(...t){t=t.map(tt);for(const n of t)if(!r(n))throw new TypeError("bitwise operators only defined for integers.");const n=t.reduce(((t,n)=>t||"bigint"==typeof n),!1);return n&&(t=t.map((t=>BigInt(t)))),tt(t.reduce(((t,n)=>t&n),n?-1n:-1))}function Yn(t){if(!r(t=tt(t)))throw new TypeError("bitwise operators only defined for integers.");return tt(~t)}function kn(t,n){if(t=tt(t),n=tt(n),!r(t)||!r(n))throw new TypeError("bitwise operators only defined for integers.");return(n="bigint"==typeof(t="bigint"==typeof n?BigInt(t):t)?BigInt(n):n)<("number"==typeof n?0:0n)?t>>-n:t<<n}var zn=n.h1,Kn=n.sc,Vn=n.TQ,Qn=n.$6,Jn=n.IG,Hn=n.qL,Un=n.WV,te=n.Dr,ne=n.V3,ee=n.uB,ie=n.I,re=n.Wc,se=n.bw,ae=n.qV,ue=n.h9,oe=n.ZQ,he=n.gE,ce=n.jy,le=n.P,fe=n.D,me=n.ZK,ge=n.i1,de=n.$D,pe=n.K_,we=n.k8,xe=n.ry,be=n.PI,Ee=n.Mr,ye=n.pT,Ne=n.xE,Ie=n.Wn,ve=n.Kh,qe=n.IH,Te=n.EU,Pe=n.J4,Re=n.r3,Me=n.ZR,Se=n.z4,Fe=n.fv,Ce=n.C,Oe=n.yc,Be=n.Zy,Ze=n.SD,_e=n.YF,$e=n.am,Ae=n.eY,je=n.Kx,Ge=n.mC,Xe=n.f9,De=n.gQ,Le=n.cs,We=n.e,Ye=n.fS,ke=n.RN,ze=n.Wj,Ke=n.Qq,Ve=n.bR,Qe=n.GW,Je=n.z7,He=n.mL,Ue=n.th,ti=n.tS,ni=n.Vl,ei=n.i,ii=n.wp,ri=n.c2,si=n.gY,ai=n.qt,ui=n.vx,oi=n.EY,hi=n.Mc,ci=n.Gf,li=n.D3,fi=n.Cl,mi=n.NR,gi=n.iR,di=n.YK,pi=n.xV,wi=n.N4,xi=n.Mo,bi=n.Dp,Ei=n.yF,yi=n.U,Ni=n.MM,Ii=n.ZI,vi=n.i2,qi=n.nM,Ti=n.GR,Pi=n.hj,Ri=n.rA,Mi=n.xP,Si=n.Ks,Fi=n.DL,Ci=n.FO,Oi=n.Bq,Bi=n.eq,Zi=n.Fr,_i=n.uq,$i=n.Qj,Ai=n.$2,ji=n.cM,Gi=n.VE,Xi=n.Tg,Di=n.IL,Li=n.ep,Wi=n.L5,Yi=n.Wi,ki=n.gP,zi=n.Yp,Ki=n.Ts,Vi=n.$W,Qi=n.Jp,Ji=n.qn,Hi=n.bq,Ui=n.ML,tr=n.nZ,nr=n.$Y,er=n.fI,ir=n.D$,rr=n.XA,sr=n.J_,ar=n.pi,ur=n.wc,or=n.$c,hr=n.sp,cr=n.NM,lr=n.H0,fr=n.O$,mr=n.R_,gr=n.GC,dr=n._b,pr=n.$X,wr=n.OR,xr=n.AE,br=n.Pq,Er=n.MB,yr=n.rP,Nr=n.ak,Ir=n.bM;export{zn as BigExactNumber,Kn as ComplexNumber,Vn as EXACT_HALF,Qn as EXACT_I,Jn as EXACT_NEG_I,Hn as EXACT_NEG_ONE,Un as EXACT_ONE,te as EXACT_TWO,ne as EXACT_ZERO,ee as HALF,ie as I,re as INEXACT_HALF,se as INEXACT_I,ae as INEXACT_NEG_I,ue as INEXACT_NEG_ONE,oe as INEXACT_NEG_ZERO,he as INEXACT_ONE,ce as INEXACT_TWO,le as INEXACT_ZERO,fe as INF,me as InexactNumber,ge as NAN,de as NEG_I,pe as NEG_INF,we as NEG_ONE,xe as ONE,be as PI,Ee as SmallExactNumber,ye as TWO,Ne as ZERO,Ie as abs,ve as acos,qe as add,Te as angle,Pe as approxEquals,Re as arithmeticShift,Me as asin,Se as atan,Fe as atan2,Ce as bigExpt,Oe as bitwiseAnd,Be as bitwiseNot,Ze as bitwiseOr,_e as bitwiseXor,$e as boxFixnum,Ae as ceiling,je as conjugate,Ge as cos,Xe as cosh,De as denominator,Le as divide,We as e,Ye as equals,ke as eqv,ze as exactToInexact,Ke as exp,Ve as expt,Qe as floor,Je as fromJSNumber,He as fromString,Ue as gcd,ti as greaterThan,ni as greaterThanOrEqual,ei as i,ii as imaginaryPart,ri as inexactToExact,si as inf,ai as integerIsOne,ui as integerSqrt,oi as isBoxedNumber,hi as isComplex,ci as isEven,li as isExact,fi as isExactInteger,mi as isExactNonNegativeInteger,gi as isExactPositiveInteger,di as isExactReal,pi as isFinite,wi as isFixnum,xi as isFlonum,bi as isInexact,Ei as isInexactReal,yi as isInteger,Ni as isJSInteger,Ii as isJSNumber,vi as isNaN,qi as isNegative,Ti as isNegativeZero,Pi as isNumber,Ri as isOdd,Mi as isPositive,Si as isRacketNumber,Fi as isRational,Ci as isReal,Oi as isSafeInteger,Bi as isSchemeNumber,Zi as isZero,_i as lcm,$i as lessThan,Ai as lessThanOrEqual,ji as log,Gi as magnitude,Xi as makeComplex,Di as makeComplexNumber,Li as makeFloat,Wi as makeNumber,Yi as makePolar,ki as makeRational,zi as makeRectangular,Ki as matchExactness,Vi as modulo,Qi as multiply,Ji as nan,Hi as negative_i,Ui as negative_inf,tr as negative_one,nr as negative_zero,er as numberIsRational,ir as numberToString,rr as numerator,sr as one,ar as pi,ur as quotient,or as realPart,hr as remainder,cr as round,lr as shouldBeBigInt,fr as sin,mr as sinh,gr as sqr,dr as sqrt,pr as subtract,wr as tan,xr as tanh,br as toExact,Er as toFixnum,yr as toInexact,Nr as two,Ir as zero};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,